;;; -*- mode: scheme; coding: euc-jp -*-
;;; https://github.com/uim/uim-doc-ja/wiki/CustomizeUim

(define uim-pref-suppress-dot-uim-warning-dialog? #t)

;;(define default-im-name 'anthy-utf8)
(define default-im-name 'test0003)
(define-key generic-on-key? '("<Control>\\" "zenkaku-hankaku"))
(define-key generic-off-key? '("<Control>\\" "zenkaku-hankaku"))

(define my-rule1-setting
  (list
   '(label . hiragana)
   '(autocommit . #t)
   '(prediction . #t)
   '(wildcard . #f)
   '(tablefile . "tables/hiragana.txt")
   ))

(define my-rule2-setting
  (list
   '(label . katakana)
   '(autocommit . #t)
   '(prediction . #t)
   '(wildcard . #f)
   '(tablefile . "tables/katakana.txt")
   ))

(define my-rule3-setting
  (list
   '(label . cj)
   '(autocommit . #f)
   '(prediction . #f)
   '(wildcard . #t)
   '(tablefile . "tables/cj-jis.txt")
   ))

(define my-rule4-setting
  (list
   '(label . zenei)
   '(autocommit . #t)
   '(prediction . #f)
   '(wildcard . #f)
   '(tablefile . "tables/zenei.txt")
   ))

(define my-rule5-setting
  (list
   '(label . hankana)
   '(autocommit . #t)
   '(prediction . #t)
   '(wildcard . #f)
   '(tablefile . "tables/hankana.txt")
   ))

(define my-rule6-setting
  (list
   '(label . c5)
   '(autocommit . #f)
   '(prediction . #f)
   '(wildcard . #t)
   '(tablefile . "/tables/cj5-70000.txt")
   ))

(define my-rule7-setting
  (list
   '(label . t9)
   '(autocommit . #f)
   '(prediction . #t)
   '(wildcard . #t)
   '(tablefile . "/tables/t9.txt")
   ))

(define test0003-rule-list
  (list my-rule1-setting my-rule2-setting my-rule3-setting my-rule4-setting my-rule5-setting my-rule6-setting my-rule7-setting))

;; "l" => "ん" "ン" "ﾝ"
;; "q" => "っ" "ッ" "ｯ"
(require "japanese.scm") 
(set! ja-rk-rule-basic
      (filter (lambda (x)
                (not (or (equal? (caaar x) "l") (equal? (caaar x) "q"))))
              ja-rk-rule-basic))
(set! ja-rk-rule-basic
      (append '(((("l") . ()) ("ん" "ン" "ﾝ"))
                ((("q") . ()) ("っ" "ッ" "ｯ")))
              ja-rk-rule-basic))

(ja-rk-rule-update)

(define skk-on-key? generic-on-key?)
;;(define skk-dcomp-activate? #t)
(define anthy-select-candidate-by-numeral-key? #t)
;;(define anthy-use-prediction? #t)
(define anthy-select-prediction-by-numeral-key? #t)

;;; vim:ft=scheme:fenc=euc-jp
